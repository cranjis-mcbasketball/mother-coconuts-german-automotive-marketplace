from django.contrib.auth.models import AbstractUser, BaseUserManager
from django.db import models
from django.db.models.signals import post_save
from django.dispatch import receiver


class UserManager(BaseUserManager):
    def create_user(self, email, password=None, is_company=False, is_customer=False, is_admin=False, is_active=False):
        if not email:
            raise ValueError("Users must have email address")
        if not password:
            raise ValueError("Users must have a password")
        user_obj = self.model(
            email=self.normalize_email(email)
        )
        user_obj.set_password(password)
        user_obj.save(using=self._db)
        return user_obj

    def create_company(self, email, password=None):
        user = self.create_user(
            email,
            password=password,
            is_company=True
        )
        return user

    def create_customer(self, email, password=None):
        user = self.create_user(
            email,
            password=password,
            is_customer=True
        )
        return user

    def create_superuser(self, email, password=None):
        user = self.create_user(
            email,
            password=password,
            is_admin=True
        )
        return user


class User(AbstractUser):
    email = models.EmailField(max_length=255, unique=True)
    is_company = models.BooleanField(default=False)
    is_customer = models.BooleanField(default=False)
    is_admin = models.BooleanField(default=False)
    is_active = models.BooleanField(default=False)
    profile_image = models.ImageField(
        default="default.jpg", upload_to='profile_images', blank=True, null=True)
    #confirmed = models.BooleanField(default=False)
    USERNAME_FIELD = 'email'
    REQUIRED_FIELDS = []

    def __str__(self):
        return self.email

    @property
    def is_company(self):
        return self.is_company

    @property
    def is_customer(self):
        return self.is_customer

    @property
    def is_admin(self):
        return self.is_admin

    @property
    def is_active(self):
        return self.is_active


class Company(models.Model):
    user = models.OneToOneField(
        User, on_delete=models.CASCADE, primary_key=True)
    header = models.ImageField(
        default="default.jpg", upload_to='profile_images', blank=True, null=True)


'''
@receiver(post_save, sender=User)
'''


def user_created_receiver(sender, instance, created, *args, **kwargs):
    if created and instance.email and instance.company:
        Company.objects.get_or_create(user=instance)


post_save.connect(user_created_receiver, sender=User)
